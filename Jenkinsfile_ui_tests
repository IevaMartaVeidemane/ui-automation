pipeline {
    agent any
    parameters {
        string(name: 'URL', defaultValue: 'https://discord.com/api/webhooks/988117458915295252/A1kEyUiRsoXL-0BfZnblq8jQB7rV5l7i3sYCu4auDE58ajN0rZ-MW8VtZ8uBeFbkoqO_', description: 'Where to send discord notification')
    }
    triggers {
        pollSCM('*/1 * * * *')
    }
    stages {
        stage('build') {
            steps {
                echo "Building application"
            }
        }
        stage('deploy-stg') {
            steps {
                script {
                    deploy("STAGING")
                }
            }
        }
        stage('test-stg') {
            steps {
                script {
                    test("STAGING")
                }
            }
        }
        stage('deploy-prod') {
            steps {
                script {
                    deploy("PROD")
                }
            }
        }
        stage('test-prod') {
            steps {
                script {
                    test("PROD")
                }
            }
        }
    }
}

def deploy(String environment) {
    try {
        echo "Deployment on ${environment} environment triggered..."
        sh "sh send_notification.sh ${environment} 0 ${params.URL}"
    }
    catch (err) {
        echo "Deployment FAILED on ${environment} environment"
        // sh 'sh send_notification.sh' "${environment}" 1
    throw err
  }

}

def test(String environment) {
    echo "Running tests on ${environment} environment..."
    try {
        sh 'docker-compose up --abort-on-container-exit'
        // sh 'sh send_notification.sh' "${environment}" 0
        }
    catch (err) {
        echo "Tests FAILED on ${environment} environment"
        // sh 'sh send_notification.sh' "${environment}" 1
    throw err
    }
}
